// SPDX-License-Identifier: BSD-3-Clause
#include <avr/cpufunc.h>
#include "MXKeyboard.hxx"
#include "led.hxx"

const uint16_t gammaLUT[256]
{
	0x000, 0x00A, 0x014, 0x01E, 0x028, 0x033, 0x03D, 0x047,
	0x051, 0x05C, 0x066, 0x071, 0x07B, 0x086, 0x090, 0x09B,
	0x0A5, 0x0B0, 0x0BA, 0x0C5, 0x0D0, 0x0DB, 0x0E5, 0x0F0,
	0x0FB, 0x106, 0x111, 0x11C, 0x127, 0x132, 0x13D, 0x148,
	0x154, 0x15F, 0x16A, 0x175, 0x181, 0x18C, 0x198, 0x1A3,
	0x1AF, 0x1BA, 0x1C6, 0x1D1, 0x1DD, 0x1E9, 0x1F4, 0x200,
	0x20C, 0x218, 0x224, 0x230, 0x23C, 0x248, 0x254, 0x260,
	0x26C, 0x278, 0x284, 0x291, 0x29D, 0x2A9, 0x2B6, 0x2C2,
	0x2CF, 0x2DB, 0x2E8, 0x2F4, 0x301, 0x30E, 0x31B, 0x327,
	0x334, 0x341, 0x34E, 0x35B, 0x368, 0x375, 0x382, 0x38F,
	0x39D, 0x3AA, 0x3B7, 0x3C4, 0x3D2, 0x3DF, 0x3ED, 0x3FA,
	0x408, 0x415, 0x423, 0x431, 0x43E, 0x44C, 0x45A, 0x468,
	0x476, 0x484, 0x492, 0x4A0, 0x4AE, 0x4BC, 0x4CB, 0x4D9,
	0x4E7, 0x4F6, 0x504, 0x512, 0x521, 0x530, 0x53E, 0x54D,
	0x55C, 0x56A, 0x579, 0x588, 0x597, 0x5A6, 0x5B5, 0x5C4,
	0x5D3, 0x5E2, 0x5F2, 0x601, 0x610, 0x620, 0x62F, 0x63F,
	0x64E, 0x65E, 0x66D, 0x67D, 0x68D, 0x69D, 0x6AD, 0x6BD,
	0x6CD, 0x6DD, 0x6ED, 0x6FD, 0x70D, 0x71D, 0x72E, 0x73E,
	0x74E, 0x75F, 0x770, 0x780, 0x791, 0x7A2, 0x7B2, 0x7C3,
	0x7D4, 0x7E5, 0x7F6, 0x807, 0x818, 0x829, 0x83B, 0x84C,
	0x85D, 0x86F, 0x880, 0x892, 0x8A3, 0x8B5, 0x8C7, 0x8D9,
	0x8EA, 0x8FC, 0x90E, 0x920, 0x932, 0x945, 0x957, 0x969,
	0x97B, 0x98E, 0x9A0, 0x9B3, 0x9C5, 0x9D8, 0x9EB, 0x9FE,
	0xA10, 0xA23, 0xA36, 0xA49, 0xA5C, 0xA70, 0xA83, 0xA96,
	0xAAA, 0xABD, 0xAD1, 0xAE4, 0xAF8, 0xB0C, 0xB1F, 0xB33,
	0xB47, 0xB5B, 0xB6F, 0xB83, 0xB97, 0xBAC, 0xBC0, 0xBD4,
	0xBE9, 0xBFD, 0xC12, 0xC27, 0xC3C, 0xC50, 0xC65, 0xC7A,
	0xC8F, 0xCA4, 0xCBA, 0xCCF, 0xCE4, 0xCFA, 0xD0F, 0xD25,
	0xD3A, 0xD50, 0xD66, 0xD7C, 0xD92, 0xDA8, 0xDBE, 0xDD4,
	0xDEA, 0xE00, 0xE17, 0xE2D, 0xE44, 0xE5A, 0xE71, 0xE88,
	0xE9F, 0xEB6, 0xECD, 0xEE4, 0xEFB, 0xF12, 0xF29, 0xF41,
	0xF58, 0xF70, 0xF88, 0xF9F, 0xFB7, 0xFCF, 0xFE7, 0xFFF
};

enum class channel_t { red, green, blue };

/*
 * PE4 = Blank
 * PE5 = XLat
 */

void ledInit()
{
	// Set PE4 and 5 to output and get blanking happening ASAP
	PORTE.DIRSET = 0x30;
	PORTE.OUTSET = 0x10;
	uartInit();
}

USART_t &ledChannelToUART(const channel_t channel)
{
	if (channel == channel_t::red)
		return USARTC0;
	else if (channel == channel_t::green)
		return USARTD0;
	else if (channel == channel_t::blue)
		return USARTC1;
	return USARTD1; // This is invalid but harmless.
}

void ledSendValuePair(const channel_t channel, const uint16_t value1, const uint16_t value2)
{
	auto &uart{ledChannelToUART(channel)};
	uartWrite(uart, uint8_t(value2 >> 4U));
	uartWrite(uart, uint8_t((value2 << 4U) & 0xF0U) | uint8_t(value1 & 0x0FU));
	uartWrite(uart, uint8_t(value1));
}

void ledSetValue(const uint8_t, const uint8_t r, const uint8_t g, const uint8_t b)
{
	const auto correctedR{gammaLUT[r]};
	const auto correctedG{gammaLUT[g]};
	const auto correctedB{gammaLUT[b]};

	ledSendValuePair(channel_t::red, correctedR, correctedR);
	ledSendValuePair(channel_t::green, correctedG, correctedG);
	ledSendValuePair(channel_t::blue, correctedB, correctedB);
}

void ledLatch()
{
	PORTE.OUTSET = 0x30;
	_NOP();
	PORTE.OUTCLR = 0x20;
	PORTE.OUTCLR = 0x10;
}
